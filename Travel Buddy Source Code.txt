// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//  Parameters that influence step-counting performance
//
#define  SMOOTHING_ALPHA         0.1   //  Exponential-smoothing:  0 < alpha <= 1
#define  ACCELERATION_THRESHOLD  2.5   //  Units of g
#define  QUICK_EVENT_IGNORE      500   //  Units of milliseconds
#define  DEBUG_PRINT             false //  When true, lots more info is sent to Serial object
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#include <Adafruit_CircuitPlayground.h>

// -- Libraries needed for the OLED display
#include <Wire.h>              //  Wire.h provides I2C support
#include <Adafruit_GFX.h>      //  Generic graphics library: fonts, lines, effects
#include <Adafruit_SSD1306.h>  //  Library for the micro OLED display
#include <string>
using namespace std;

// -- Create an SSD1306 object called OLED that is connected by I2C
#define OLED_RESET       4     //  Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_WIDTH   128     //  OLED display width in pixels
#define SCREEN_HEIGHT   64     //  OLED display height in pixels
#define I2CADDR       0x3D     //  I2C address is used in setupOLED()

Adafruit_SSD1306 OLED(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
String Kindness = "END MY SUFFERING";
int MessageVal;
bool CycleMessage = true;
bool test = false;
const int pin = A3;
bool pinInput;
// ------------------------------------------------------------------------------------
void setup() {

  Serial.begin(115200);

  CircuitPlayground.begin();
  delay(3000);                // Pause for system startup.  This may not be necessary
  setupOLED();                // Do standard set-up work in a reusable function
  pinMode(A2,OUTPUT);
pinMode(pin,INPUT);
pinMode(pin,OUTPUT);
digitalWrite(pin,HIGH);

  Serial.println("t\ta\tnstep");  //  Headings for Serial Plotter
}
int previous = -1;
// ------------------------------------------------------------------------------------
void loop() {
 pinInput = digitalRead(pin);
  float a;                                         //  Current, smoothed total acceleration value
  float alfa = SMOOTHING_ALPHA;                    //  Smoothing parameter: 0 < alfa <= 1
  float aStepThreshold = ACCELERATION_THRESHOLD;   //  Threshold to detect a step
  float tNow;                                      //  Current clock time in seconds

  // -- static variables are remembered:  use these instead of global variables
  static unsigned int nSteps = 0;       //  Number of steps counted
  static float aOffset = -999.0;        //  Baseline acceleration. Initially negative to signal 1st iteration
  static unsigned long tStart;          //  Clock time when last of start-up work is finished

  // -- Compute the baseline acceleration only once.  Use trick that aOffset will be negative
  //    only when the loop is executed the first time
  if ( aOffset < 0 ) {
    aOffset = measure_baseline();
    tStart = millis();                          //  True start time after set-up housekeeping
  }

  tNow = float(millis() - tStart) / 1000.0;     //  Subtract tStart to remove time it took to startup
  a = accelSmooth(0.5) - aOffset;               //  Total smoothed acceleration relative to aOffset
  nSteps += count_step(a, aStepThreshold);      //  count_step returns 1 if a step was detected, 0 otherwise

  updateOLED(int(tNow), nSteps, &previous);                //  Update the OLED display
digitalWrite(A2,LOW);
  if ( DEBUG_PRINT ) {
    Serial.print(tNow);
    Serial.print("\t");
    Serial.print(a);
    Serial.print("\t");
    Serial.println(nSteps);
    delay(10);              //   Delay only for debugging/viewing
  }
}

// ------------------------------------------------------------------------------------
// Compute a baseline level of acceleration.  Normally the user would be
// standing still during this time.  So, baseline level should be (roughly)
// the acceleration of gravity, g = 9.8 m/s^2.  Steps are determined by
// measuring the acceleration relative to the baseline level.
// Determine the baseline as the average of nave readings
//
float measure_baseline() {

  float aSum;            //  Stores accumulated sum during baseline calculation
  float baseline;        //  Result of baseline measurement
  int   nave = 10;      //  Number of readings used to obtain the baseline
  int   baseDelay = 10;  //  Time in milliseconds to wait between baseline readings

  OLEDmessage(1, "Calibrating");
  Serial.print("Calibrating for ");  Serial.print(nave * baseDelay / 1000);  Serial.println(" seconds");

  // -- Add up nave readings.  Divide sum by nave to get the average
  aSum = 0.0;
  for ( int i = 1; i <= nave; i++ ) {
    aSum += accelSmooth(0.5);
    //CircuitPlayground.playTone(100, baseDelay);   //  Make a buzzing sound during calibration
      delay(baseDelay);                         //  Use this instead of playTone for quiet calibration
  }
  baseline = aSum / float(nave);
  OLEDmessage(1, "Done calibrating");

  Serial.println("Done calibrating");
  Serial.print("baseline = ");  Serial.print(baseline);  Serial.println(" m/s^2");
  return (baseline);
}

// ------------------------------------------------------------------------------------
//  Given the current acceleration and a threshold value for acceleration return 1 if
//  a step was likely (according to the decision rules) or 0 otherwise.  The threshold
//  value is determined by experimentation and supplied as an input.  A good start
//  for the threshold is about 1 m/s^2
//
int count_step(float a, float threshold) {

  int n;                                  //  Local variable, number of steps detected:  1 or 0
  int shortStepTime = QUICK_EVENT_IGNORE; //  Ignore events separated by less than this time (ms)
  static unsigned long lastStepTime = 0;  //  Time when last step was registered
  static boolean lastWasLow = true;       //  Was the last acceleration level was above the threshold?

  // -- Ignore data if this acceleration time is less than a reasonable time since the
  //    last possible step.
  if ( (millis() - lastStepTime) < shortStepTime ) {
    return (0);
  }
  // -- Begin determining whether new acceleration measurement indicates a step was taken
  n = 0;
  if ( a > threshold  ) {    //  A step occurred if accleration was above the threshold
    if ( lastWasLow ) {      //  AND if the last acceleration value was NOT above the threshold
      n = 1;
      lastStepTime = millis();
    }
    lastWasLow = false;      //  Threshold was crossed, so last step was not low
  } else {
    lastWasLow = true;       //  Threshold was not crossed, so last step was low
  }
  return (n);                // n = 0 for no step;  n = 1 for a step
}

// ------------------------------------------------------------------------------------
//  Make a new measurement of total acceleration and return the exponentially-weighted
//  average of this measurement and recent measurements.
//  The smoothing acts as a low-pass filter to reduce high frequency noise.
//  The smoothing parameter is alfa:  0 < alfa <= 1.0.  When alfa = 1, no smoothing
//  is applied -- the most recent reading of total acceleration is returned.
//  As alfa is reduced toward zero more smoothing is applied. You will need to
//  experiment to determine a value of alfa that works with the acceleration you
//  are measuring.  A value in the range 0.3 < alfa < 0.6 is a usually first guess.
//
float accelSmooth(float alfa) {
  float ax, ay, az, aTot, aTotSmooth;   //  acceleration components and magnitudes
  static float aTotOld = -99.0;         //  Value retained for the next call to accelSmooth

  // -- Retrieve acceleration components and compute the total
  ax = CircuitPlayground.motionX();
  ay = CircuitPlayground.motionY();
  az = CircuitPlayground.motionZ();
  aTot = sqrt(ax * ax + ay * ay + az * az);   //  could also use pow(ax,2), but ax*ax is faster

  // -- Use exponential smoothing of the total acceleration value (magnitude of acceleration vector).
  //    The "if" statement tests whether this is the first measurement.  aTotOld is initialized
  //    to -99 because for the very first measurement, there is no true "old" value, and
  //    we simply use the current reading.  This test avoids causing the exponential average to
  //    include a bogus intial reading.  Without this test the first few values returned by
  //    this (accelSmooth) function would include a reading of zero, which would cause
  //    the trend in values to start at an artificially low value.
  if ( aTotOld < 0.0 ) {
    aTotSmooth = aTot;
  } else {
    aTotSmooth = aTot * alfa + (1 - alfa) * aTotOld;
  }
  aTotOld = aTotSmooth;  //  Save for next measurement

  // -- Print acceleration values without extra text so that Serial Plotter can be used
  //    When everything is working, there is no need to print these details
  if ( DEBUG_PRINT) {
    Serial.print(ax);
    Serial.print("\t");   Serial.print(ay);
    Serial.print("\t");   Serial.print(az);
    Serial.print("\t");   Serial.print(aTot);
    Serial.print("\t");   Serial.println(aTotSmooth);
  }

  return (aTotSmooth);
}

// ------------------------------------------------------------------------------------
//  Set the I2C address and internal voltage supply for the OLED display.
//  If configuration is successful, display the splash screen and another message.
//  These steps are only needed once at the start of a sketch, and presume the
//  existence of a global Adafruit_SSD1306 object called OLED.
//
void setupOLED() {

  // -- Set up OLED display.  Use internal 3.3v supply, and Adafruit trick
  //      SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  //    I2C address is 0x3C for the 128x32 display
  if ( !OLED.begin(SSD1306_SWITCHCAPVCC, I2CADDR) ) {
    Serial.println(F("SSD1306 allocation failed"));
    while (true) ;   // Don't proceed, loop forever
  }

  // -- Show Adafruit splash screen stored in image buffer.
  OLED.display();
  delay(1000);         //  Pause to allow user to read the display

  // -- Clear the splash screen, set default text mode and display a "ready" message.
  OLED.clearDisplay();
  OLED.setTextSize(1);
  OLED.setTextColor(SSD1306_WHITE);
  OLED.print(F("OLED is ready"));
  OLED.display();
  delay(1000);                         //  Pause to allow user to read the display
}

// ------------------------------------------------------------------------------------
// This code actually makes the pedometer and messages accessible to the user
//


void updateOLED(unsigned long ts, unsigned int stepCount, int* previous) {
    int random = rand() % 20;
  OLED.clearDisplay();       // Clear the buffer.
  
  // -- Add display of time in minutes on third line
  OLED.setTextSize(1);       // Select font size
  OLED.setCursor(0, 0);     // (x,y) coords to start.  (0,0) is upper left
  OLED.print(stepCount);
  OLED.print(F(" steps\n"));   //  String constant is contained in F(...)
int ModStep = stepCount % 3;
pinInput = digitalRead(pin);
//Serial.print(MessageVal);
//Serial.print("\t"); Serial.print(random);
Serial.print("Cycle: "); Serial.println(CycleMessage);
Serial.print("Mod: "); Serial.println(ModStep);
Serial.print("Previous "); Serial.println(*previous);
Serial.print("Steps "); Serial.println(stepCount);
Serial.print("Random "); Serial.println(random);
Serial.print("MessageValue"); Serial.println(MessageVal);
Serial.print("Pin Input"); Serial.println(pinInput);
  //If statements that contain the code for positive messages
  //
  if((ModStep==0 || pinInput == 0) && CycleMessage == true && *previous < (int)  stepCount){
    *previous = (int)stepCount;
    digitalWrite(A2,HIGH);

    CycleMessage = false;
    //OLED.print(random);
    if(random == 0){
      OLED.setTextSize(1);
      MessageVal = 0;
      OLED.setCursor(0, 10);
      Kindness = "anxiety lies, but you don't need to listen";
      
    }
    else if(random == 1){
      OLED.setTextSize(1);      
      MessageVal = 1;
      OLED.setCursor(0, 10);
      Kindness="you are enough, exactly as you are";
      
    }
    else if(random == 2){
      OLED.setTextSize(1);
      MessageVal = 2;
      OLED.setCursor(0, 10);
    Kindness = "take a deep breath";
      
    }
    else if(random == 3){
      OLED.setTextSize(1);
      MessageVal = 3;
      OLED.setCursor(0, 10);
      Kindness = "think about something you're grateful for";
      
    }
    else if(random == 4){
      OLED.setTextSize(1);
      MessageVal = 4;
      OLED.setCursor(0, 10);
      Kindness="what makes you happy?";
      
    }    else if(random == 5){
      OLED.setTextSize(1);
      MessageVal = 5;
      OLED.setCursor(0, 10);
      Kindness="you are enough";
      
    }    else if(random == 6){
      OLED.setTextSize(1);
      MessageVal = 6;
      OLED.setCursor(0, 10);
      Kindness="we all feel a little strange sometimes";
      
    }    else if(random == 7){
      OLED.setTextSize(1);
      MessageVal = 7;
      OLED.setCursor(0, 10);
      Kindness="you can get through this";
      
    }    else if(random == 8){
      OLED.setTextSize(1);
      MessageVal = 8;
      OLED.setCursor(0, 10);
      Kindness="life is hard, but not impossible";
      
    }    else if(random == 9){
      OLED.setTextSize(1);
      MessageVal = 9;
      OLED.setCursor(0, 10);
      Kindness="you are strong";
      
    }    else if(random == 10){
      OLED.setTextSize(1);
      MessageVal = 10;
      OLED.setCursor(0, 10);
      Kindness="this, too, will pass";
      
    }    else if(random == 11){
      OLED.setTextSize(1);
      MessageVal = 11;
      OLED.setCursor(0, 10);
      Kindness="you are valuable";
      
    }    else if(random == 12){
      OLED.setTextSize(1);
      MessageVal = 12;
      OLED.setCursor(0, 10);
      Kindness="it's a small part of a big picture";
      
    }    else if(random == 13){
      OLED.setTextSize(1);
      MessageVal = 13;
      OLED.setCursor(0, 10);
      Kindness="you are not a burden";
      
    }    else if(random == 14){
      OLED.setTextSize(1);
      MessageVal = 14;
      OLED.setCursor(0, 10);
      Kindness="there is no shame in asking for help";
      
    }    else if(random == 15){
      OLED.setTextSize(1);
      MessageVal = 15;
      OLED.setCursor(0, 10);
      Kindness="chronic anxiety is not normal, but it is treatable";
      
    }    else if(random == 16){
      OLED.setTextSize(1);
      MessageVal = 16;
      OLED.setCursor(0, 10);
      Kindness="confidence is 90% ignoring anxiety";
      
    }    else if(random == 17){
      OLED.setTextSize(1);
      MessageVal = 17;
      OLED.setCursor(0, 10);
      Kindness="everyone has moments of weakness";
      
    }    else if(random == 18){
      OLED.setTextSize(1);
      MessageVal = 18;
      OLED.setCursor(0, 10);
      Kindness="there is always more than one solution";
      
    }    else if(random == 19){
      OLED.setTextSize(1);
      MessageVal = 19;
      OLED.setCursor(0, 10);
      Kindness="Find a space where you can feel comfortable";
    }
       delay(500);
       // Weezer();

  }
  else if (ModStep > 0 && CycleMessage == false/* && pinInput == 1*/);{
    CycleMessage = true;
  }
   OLED.print(Kindness); 
  OLED.display();

  //OLED.print(random);
              // Update the display

}

// ------------------------------------------------------------------------------------
//  Display new values of system clock in milliseconds and seconds on the micro OLED.
//  This function assumes that OLED is a global Adafruit_SSD103 object.
//
void OLEDmessage(int textSize, const char *message) {

  OLED.clearDisplay();         // Clear the buffer.
  OLED.setCursor(0, 0);        // (x,y) coords to start.  (0,0) is upper left
  OLED.setTextSize(textSize);  // Select font size
  OLED.print(message);         //  Write the message to the buffer
  OLED.display();              // Update the display
}
void Weezer(){
    CircuitPlayground.playTone(830.61,100); //Weezer Riff
    CircuitPlayground.playTone(659.26,100);
    CircuitPlayground.playTone(830.61,100);
    CircuitPlayground.playTone(932.33,100);
    CircuitPlayground.playTone(1046.5,100);
    CircuitPlayground.playTone(932.33,100);
    CircuitPlayground.playTone(830.61,100);
    CircuitPlayground.playTone(659.26,100);
    CircuitPlayground.playTone(622.25,200);
}